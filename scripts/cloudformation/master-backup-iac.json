{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {
    "AWS::CloudFormation::Designer": {
        "25a04534-7d57-4ad0-b4c8-7cbc5559f033": {
        "size": {
            "width": 60,
            "height": 60
        },
        "position": {
            "x": 260,
            "y": 80
        },
        "z": 1,
        "embeds": []
        }
    }
    },
    "Parameters": {
        "TENANT": { 
        "Type": "String",
        "Description": "This is a sample parameter for a string value."
        },
        "DBParameter": {
        "Type": "String",
        "Description": "DB path to ssm",
        "Default": "/repair/DBParameter"
        },
        "UserParameter": {
        "Type": "String",
        "Default": "/repair/UserParameter"
        },
        "PasswordParameter": {
        "Type": "String",
        "Default": "/repair/PasswordParameter"
        },
        "HostParameter": {
        "Type": "String",
        "Default": "/repair/HostParameter"
        },
        "PortParameter": {
        "Type": "String",
        "Default": "/repair/PortParameter"
        },
        "UserPoolIdParameter": {
        "Type": "String",
        "Default": "/repair/UserPoolIdParameter"
        },
        "AppClientIdParameter": {
        "Type": "String",
        "Default": "/repair/AppClientIdParameter"
        },        
        "ApiEndpointParameter": {
            "Type": "String",
            "Default": "/repair/ApiEndpointParameter"
            },
        "CognitoDomain": {
            "Type": "String",
            "MinLength": 3,
            "MaxLength": 63,
            "AllowedPattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
            "Description": "repairshop-lneil",
            "Default":"repairshop-lneil"
        }
    },
    "Resources": {
        "SsmVpcEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": "com.amazonaws.ap-southeast-2.ssm",
                "VpcId": "vpc-0e374d23662af34be",
                "PrivateDnsEnabled": true,
                "VpcEndpointType": "Interface",
                "SecurityGroupIds": ["sg-0c4a09ccfe5dc9b4e"],
                "SubnetIds": ["subnet-0f7a246f9e06f81d2", "subnet-0af6145256374ccf3", "subnet-021c1678adadf3366"]
            }
        },
        "UserSSMParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": { "Ref": "UserParameter" },
                "Description": "This is my SSM parameter",
                "Type": "String",
                "Value": "lachieneilsen"
            }
        },
        "PasswordSSMParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": { "Ref": "PasswordParameter" },
                "Description": "This is another SSM parameter",
                "Type": "String",
                "Value": "satan111"
            }
        },
        "PortSSMParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": { "Ref": "PortParameter" },
                "Description": "This is the SSM parameter for the port",
                "Type": "String",
                "Value": "5432"
            }
        },
        "DBSSMParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": { "Ref": "DBParameter" },
                "Description": "This is the SSM parameter for the port",
                "Type": "String",
                "Value": "repairshop"
            }
        },
        "TagCognitoUserFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "TagCognitoUserPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cognito-idp:AdminUpdateUserAttributes",
                                        "cognito-idp:AdminGetUser"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:ap-southeast-2:286456780400:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ssm:GetParameter",
                                    "Resource": "arn:aws:ssm:ap-southeast-2:286456780400:parameter/your-parameter-name"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DefineTablesFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "tag-cognito-user.lambda_handler",
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "define-tables.zip"
                },
                "Runtime": "python3.7",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                }
            }
        },
        "TagCognitoUserFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "tag-cognito-user.lambda_handler",
                "Role": { "Fn::GetAtt": [ "TagCognitoUserFunctionRole", "Arn" ] },
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "tag-cognito-user.zip"
                },
                "Runtime": "python3.7",
                "Environment": {
                    "Variables": {
                        "POOL": { "Ref": "UserPoolIdParameter" },
                        "DEFINETABLES":{"Ref":"DefineTablesFunction"}
                    }
                },
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                }
            }
        },
        "UserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
                "UserPoolName": "MyUserPool",
                "Policies": {
                    "PasswordPolicy": {
                        "MinimumLength": 8,
                        "RequireUppercase": true,
                        "RequireLowercase": true,
                        "RequireNumbers": true,
                        "RequireSymbols": false
                    }
                },
                "Schema": [
                    {
                        "Name": "username",
                        "AttributeDataType": "String"
                    },
                    {
                        "Name": "email",
                        "AttributeDataType": "String",
                        "Required": true
                    }
                ],
                "UsernameConfiguration": {
                    "CaseSensitive": true
                },
                "AutoVerifiedAttributes": [ "email" ],
                "LambdaConfig": {
                    "PostConfirmation": {
                        "Fn::GetAtt": [ "TagCognitoUserFunction", "Arn" ]
                    }
                },
                "VerificationMessageTemplate": {
                    "EmailSubject": "Verify your email for our awesome app!",
                    "EmailMessage": "Please click the link below to verify your email address. {####}"
                }
            }
        },
        "MasterGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
                "GroupName": "Master",
                "UserPoolId": { "Ref": "UserPool" }
            }
        },
        "UsersGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
                "GroupName": "Users",
                "UserPoolId": { "Ref": "UserPool" }
            }
        },
        "MasterPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "sts:AssumeRole",
                            "Resource": { "Fn::GetAtt": [ "MasterRole", "Arn" ] }
                        }
                    ]
                },
                "Roles": [ { "Ref": "MasterRole" } ]
            }
        },
        "MasterRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "cognito-idp.amazonaws.com"
                            },
                            "Action": "sts:AssumeRoleWithWebIdentity"
                        }
                    ]
                }
            }
        },
        "UserPoolDomain": {
            "Type": "AWS::Cognito::UserPoolDomain",
            "Properties": {
                "Domain": { "Ref": "CognitoDomain" },
                "UserPoolId": { "Ref": "UserPool" }
            }
        },
        "UserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
                "UserPoolId": { "Ref": "UserPool" },
                "AllowedOAuthFlowsUserPoolClient": true,
                "AllowedOAuthFlows": [ "code", "implicit" ],
                "AllowedOAuthScopes": [
                    "phone",
                    "email",
                    "openid",
                    "profile"
                ],
                "CallbackURLs": [ "https://repair-frontend.s3.ap-southeast-2.amazonaws.com/index.html" ],
                "SupportedIdentityProviders": [ "COGNITO" ],
                "ExplicitAuthFlows": [ "ALLOW_USER_PASSWORD_AUTH", "ALLOW_USER_SRP_AUTH", "ALLOW_REFRESH_TOKEN_AUTH" ]
            }
        },
        "UserPoolIdSSMParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": { "Ref": "UserPoolIdParameter" },
                "Description": "This is the SSM parameter for the port",
                "Type": "String",
                "Value": { "Ref": "UserPool" }
            }
        },
        "AppClientIdSSMParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": { "Ref": "AppClientIdParameter" },
                "Description": "This is the SSM parameter for the port",
                "Type": "String",
                "Value": { "Ref": "UserPoolClient" }
            }
        },
        "MyDBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBInstanceIdentifier": "repairshop",
                "DBInstanceClass": "db.t3.micro",
                "Engine": "postgres",
                "EngineVersion": "14.7",
                "AllocatedStorage": "20",
                "DBName": { "Fn::Sub": "${DBSSMParameter.Value}" },
                "MasterUsername": { "Fn::Sub": "${UserSSMParameter.Value}" },
                "MasterUserPassword": { "Fn::Sub": "${PasswordSSMParameter.Value}" },
                "DeletionProtection": false
            }
        },
        "HostSSMParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": { "Ref": "HostParameter" },
                "Description": "This is the SSM parameter for the host",
                "Type": "String",
                "Value": { "Fn::GetAtt": [ "MyDBInstance", "Endpoint.Address" ] }
            }
        },
        "AddCustomerFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "add-customer.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "add-customer.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": { "Ref": "DBParameter" },
                        "USER": { "Ref": "UserParameter" },
                        "PASSWORD": { "Ref": "PasswordParameter" },
                        "HOST": { "Ref": "HostParameter" },
                        "PORT": { "Ref": "PortParameter" },
                        "TENANT": { "Ref": "TENANT" }
                    }
                }
            }
        },
        "AddAssetFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "add-asset.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "add-asset.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": {
                            "Ref": "DBParameter"
                        },
                        "USER": {
                            "Ref": "UserParameter"
                        },
                        "PASSWORD": {
                            "Ref": "PasswordParameter"
                        },
                        "HOST": {
                            "Ref": "HostParameter"
                        },
                        "PORT": {
                            "Ref": "PortParameter"
                        },
                        "TENANT": { "Ref": "TENANT" }
                    }
                }
            }
        },
        "AddEmployeeFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "add-employee.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "add-employee.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": {
                            "Ref": "DBParameter"
                        },
                        "USER": {
                            "Ref": "UserParameter"
                        },
                        "PASSWORD": {
                            "Ref": "PasswordParameter"
                        },
                        "HOST": {
                            "Ref": "HostParameter"
                        },
                        "PORT": {
                            "Ref": "PortParameter"
                        },
                        "TENANT": { "Ref": "TENANT" }
                    }
                }
            }
        },
        "AddInvoiceFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "add-invoice.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "add-invoice.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": {
                            "Ref": "DBParameter"
                        },
                        "USER": {
                            "Ref": "UserParameter"
                        },
                        "PASSWORD": {
                            "Ref": "PasswordParameter"
                        },
                        "HOST": {
                            "Ref": "HostParameter"
                        },
                        "PORT": {
                            "Ref": "PortParameter"
                        },
                        "TENANT": { "Ref": "TENANT" }
                    }
                }
            }
        },
        "AddItemFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "add-item.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "add-item.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": {
                            "Ref": "DBParameter"
                        },
                        "USER": {
                            "Ref": "UserParameter"
                        },
                        "PASSWORD": {
                            "Ref": "PasswordParameter"
                        },
                        "HOST": {
                            "Ref": "HostParameter"
                        },
                        "PORT": {
                            "Ref": "PortParameter"
                        },
                        "TENANT": { "Ref": "TENANT" }
                    }
                }
            }
        },
        "AddStockFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "add-stock.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "add-stock.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": {
                            "Ref": "DBParameter"
                        },
                        "USER": {
                            "Ref": "UserParameter"
                        },
                        "PASSWORD": {
                            "Ref": "PasswordParameter"
                        },
                        "HOST": {
                            "Ref": "HostParameter"
                        },
                        "PORT": {
                            "Ref": "PortParameter"
                        },
                        "TENANT": { 
                            "Ref": "TENANT" 
                        }
                    }
                }
            }
        },
        "AddStoreFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "add-store.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "add-store.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": {
                            "Ref": "DBParameter"
                        },
                        "USER": {
                            "Ref": "UserParameter"
                        },
                        "PASSWORD": {
                            "Ref": "PasswordParameter"
                        },
                        "HOST": {
                            "Ref": "HostParameter"
                        },
                        "PORT": {
                            "Ref": "PortParameter"
                        },
                        "TENANT": { "Ref": "TENANT" }
                    }
                }
            }
        },
        "AddTicketFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "add-ticket.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "add-ticket.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": {
                            "Ref": "DBParameter"
                        },
                        "USER": {
                            "Ref": "UserParameter"
                        },
                        "PASSWORD": {
                            "Ref": "PasswordParameter"
                        },
                        "HOST": {
                            "Ref": "HostParameter"
                        },
                        "PORT": {
                            "Ref": "PortParameter"
                        },
                        "TENANT": { "Ref": "TENANT" }
                    }
                }
            }
        },
        "QueryFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "repair-lneil",
                    "S3Key": "query.zip"
                },
                "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
                "Runtime": "python3.7",
                "Handler": "query.lambda_handler",
                "VpcConfig": {
                    "SubnetIds": [
                        "subnet-0f7a246f9e06f81d2",
                        "subnet-0af6145256374ccf3",
                        "subnet-021c1678adadf3366"
                    ],
                    "SecurityGroupIds": [
                        "sg-0d2971aad7d08fa3f"
                    ]
                },
                "Layers": [
                    "arn:aws:lambda:ap-southeast-2:286456780400:layer:psycopg2:3"
                ],
                "Environment": {
                    "Variables": {
                        "DB": {
                            "Ref": "DBParameter"
                        },
                        "USER": {
                            "Ref": "UserParameter"
                        },
                        "PASSWORD": {
                            "Ref": "PasswordParameter"
                        },
                        "HOST": {
                            "Ref": "HostParameter"
                        },
                        "PORT": {
                            "Ref": "PortParameter"
                        },
                        "TENANT": { "Ref": "TENANT" }
                    }
                }
            }
        },
        "GetValueFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "repair-lneil",
              "S3Key": "get-value.zip"
            },
            "Role": "arn:aws:iam::286456780400:role/service-role/add-customer-role-sxndynrl",
            "Runtime": "python3.7",
            "Handler": "get-value.lambda_handler",
            "VpcConfig": {
              "SubnetIds": [
                "subnet-0f7a246f9e06f81d2",
                "subnet-0af6145256374ccf3",
                "subnet-021c1678adadf3366"
              ],
              "SecurityGroupIds": [
                "sg-0d2971aad7d08fa3f"
              ]
            }
            }
        },
        "ApiGateway": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "ApiGateway"
            }
        },
        "ApiGatewayCognitoAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
                "Name": "CognitoAuthorizer",
                "RestApiId": { "Ref": "ApiGateway" },
                "Type": "COGNITO_USER_POOLS",
                "ProviderARNs": [
                    { "Fn::GetAtt": [ "UserPool", "Arn" ] }
                ],
                "IdentitySource": "method.request.header.Authorization"
            }
        },
        "ApiGatewayRootResourceId": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Fn::GetAtt": [ "ApiGateway", "RootResourceId" ] },
                "PathPart": "dev"
            }
        },
        "AddCustomerResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-customer"
            }
        },
        "AddCustomerMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "AddCustomerResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddCustomerFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'POST'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }
                ]
            }
        },
        "AddAssetResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-asset"
            }
        },
        "AddAssetMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "AddAssetResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddAssetFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'POST'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }
                ]
            }
        },
        "AddEmployeeResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-employee"
            }
        },
        "AddEmployeeMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "AddEmployeeResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddEmployeeFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'POST'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }
                ]
            }
        },
        "AddInvoiceResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-invoice"
            }
        },
        "AddInvoiceMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "AddInvoiceResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddInvoiceFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'POST'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }
                ]
            }
        },
        "AddItemResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-item"
            }
        },
        "AddItemMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "AddItemResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddItemFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'POST'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }
                ]
            }
        },
        "AddStockResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-stock"
            }
        },
        "AddStockMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "AddStockResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddStockFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
    {
        "StatusCode": "200",
        "ResponseParameters": {
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
            "method.response.header.Access-Control-Allow-Methods": "'POST'",
            "method.response.header.Access-Control-Allow-Origin": "'*'"
        }
    }
]
            }
        },
        "AddStoreResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-store"
            }
        },
        "AddStoreMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "AddStoreResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddStoreFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'POST'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }
                ]
            }
        },
        "AddTicketResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-ticket"
            }
        },
        "AddTicketMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "AddTicketResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddTicketFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET,DELETE,PUT'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }
                ]
            }
        },
        "QueryResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ParentId": { "Ref": "ApiGatewayRootResourceId" },
                "PathPart": "add-query"
            }
        },
        "QueryMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "ResourceId": { "Ref": "QueryResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": { "Ref": "ApiGatewayCognitoAuthorizer" },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET,DELETE,PUT'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }
                ]
            }
        },
        "GetValueResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": { "Ref": "ApiGateway" },
              "ParentId": { "Ref": "ApiGatewayRootResourceId" },
              "PathPart": "getvalue"
            }
        },
        "GetValueMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "RestApiId": { "Ref": "ApiGateway" },
              "ResourceId": { "Ref": "GetValueResource" },
              "HttpMethod": "POST",
              "AuthorizationType": "NONE",
              "Integration": {
                "Type": "AWS_PROXY",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetValueFunction.Arn}/invocations"
                }
              },
              "MethodResponses": [
                {
                    "StatusCode": 200,
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET,DELETE,PUT'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    }
                }
            ]
            }
        },
        "GetValueMethodPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:InvokeFunction",
              "FunctionName": { "Ref": "GetValueFunction" },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/getvalue"
              }
            }
        },
        "ApiGatewayDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [ "AddCustomerMethod", "AddAssetFunction", "AddEmployeeFunction", "AddInvoiceFunction", "AddItemFunction", "AddStockFunction", "AddStoreFunction", "AddTicketFunction", "QueryFunction", "GetValueMethod" ],
            "Properties": {
                "RestApiId": { "Ref": "ApiGateway" },
                "StageName": "prod"
            }
        },        
        "ApiEndpointSSMParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
              "Name": {"Ref": "ApiEndpointParameter"},
              "Description": "This is the SSM parameter for the API endpoint URL",
              "Type": "String",
              "Value": {
                "Fn::Sub": "https://${ApiGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}/prod"
              }
            }
        },
        "LambdaApiGatewayInvokeAddCustomer": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "AddCustomerFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/add-customer" }
            }
        },
        "LambdaApiGatewayInvokeAddAsset": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "AddAssetFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/add-asset" }
            }
        },
        "LambdaApiGatewayInvokeAddEmployee": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "AddEmployeeFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/add-employee" }
            }
        },
        "LambdaApiGatewayInvokeAddInvoice": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "AddInvoiceFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/add-invoice" }
            }
        },
        "LambdaApiGatewayInvokeAddItem": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "AddItemFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/add-item" }
            }
        },
        "LambdaApiGatewayInvokeAddStock": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "AddStockFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/add-stock" }
            }
        },
        "LambdaApiGatewayInvokeAddStore": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "AddStoreFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/add-store" }
            }
        },
        "LambdaApiGatewayInvokeAddTicket": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "AddTicketFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/add-ticket" }
            }
        },
        "LambdaApiGatewayInvokeQuery": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Fn::GetAtt": [ "QueryFunction", "Arn" ] },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/dev/query" }
            }
        }
    },
    "Outputs":{
        "CognitoUserPoolID": {
            "Value": { "Ref": "UserPool" },
            "Description": "The UserPool ID"
        },
        "CognitoAppClientID": {
            "Value": { "Ref": "UserPoolClient" },
            "Description": "The app client"
        },
        "HostedUIURL": {
            "Value": {
                "Fn::Sub":
                "https://repair-frontend.s3.ap-southeast-2.amazonaws.com/index.html"
            },
        "Description": "The hosted UI URL"
        } 
    }
}